	PRESERVE8
Stack EQU 0x00000100
	AREA STACK,NOINIT,READWRITE
StackMem SPACE Stack
	
	AREA RESET,DATA,READONLY
	EXPORT __Vectors
__Vectors
	DCD StackMem
	DCD Reset_Handler

	AREA tempData,DATA,READONLY
ROMARRAY DCD 10,9,8,7,6,5,4,3,2,1
LEN EQU 10
	AREA |.data|,DATA,READWRITE
ARRAY SPACE 32
	
	AREA |.text|,CODE,READONLY
	ENTRY
	EXPORT Reset_Handler
Reset_Handler
Reset_Handler_End

	LDR R1,=ROMARRAY+36
	LDR R2,=ARRAY+36
	MOV R0,#LEN
	
MEMCPY_LOOP			; COPY ELEMENTS FROM ROM TO RAM
	LDR R3,[R1],#-4
	STR R3,[R2],#-4
	SUBS R0,R0,#1
	BNE MEMCPY_LOOP
	
	MOV R4,#LEN
LOADING	
	LDR R2,=ARRAY
	MOV R0,#LEN-1
	SUBS R4,R4,#1
	
SORT_LOOP
	LDR R5,[R2]
	LDR R6,[R2,#4]
	CMP R5,R6
	ADDEQ R2,R2,#4
	
	ADDLT R2,R2,#4
	
	STRGT R6,[R2]
	STRGT R5,[R2,#4]
	ADDGT R2,R2,#4
	
	SUBS R0,R0,#1
	CMP R0,#0
	BEQ LOADING
	
	CMP R4,#0
	BEQ BINARY_SEARCH
	BL SORT_LOOP

BINARY_SEARCH
	LDR R0, =ARRAY 	;BASE ADDRESS OF SORTED RAM ARRAY
	MOV R1, #0 		;INDEX OF FIRST ELEMENT
	MOV R2, #9 		;INDEX OF LAST ELEMENT
	MOV R3, #0x8 	;SEARCH ELEMENT
	BL BINARY_SEARCH_START

STOP B STOP 

BINARY_SEARCH_START
	MOV R4, R0
	MOV R0, #0
BINARY_SEARCH_LOOP
	ADD R5,R1,R2
	LSR R5,R5,#1 	;CALCULATING MID INDEX
	LSL R7,R5,#2 	;CALCULATING ELEMENT OFFSET FROM BASE 
	LDR R6,[R4,R7]
	CMP R3,R6
	ADDEQ R0,R0,R5
	ADDEQ R0,R0,#1
	MOVEQ PC,LR 	
	SUBLT R5,R5,#1
	MOVLT R2,R5
	ADDGT R5,R5,#1
	MOVGT R1,R5
	CMP R1,R2
	MOVGT PC,LR
	B BINARY_SEARCH_LOOP
	NOP
	
	END